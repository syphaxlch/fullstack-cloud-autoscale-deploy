{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": { "type": "String" },
    "VaultName": { "type": "String" },
    "AppConfigName": { "type": "String" },
    "ApplicationInsightName": { "type": "String" },
    "LogAnalyticsName": { "type": "String" },
    "NoSQLname": { "type": "string" },
    "NoSQLdatabaseName": { "type": "string" },
    "storageAccountName": { "type": "String" },
    "storageBlobContainerName1": { "type": "String" },
    "storageBlobContainerName2": { "type": "String" },
    "storageBlobContainerName3": { "type": "String" },
    "AzureAdClientId": { "type": "string" },
    "AzureAdDomainName": { "type": "string" },
    "ServiceBusName": { "type": "string" },
    "ServiceBusQueue1Name": { "type": "string" },
    "ServiceBusQueue2Name": { "type": "string" },
    "ContentSafetyname": { "type": "String" },
    "resourceGroupName": { "type": "String" },
    "uniqueId": {
      "defaultValue": "[newGuid()]",
      "type": "String"
    },
    "EventHubName": { "type": "string" },
    "EventHubHubName": { "type": "string" },
    "EventHubConsumerGroupName": { "type": "string" },
    "ContainerRegistryName": { "type": "string" },

    // Content Safety Stuff ...

    "virtualNetworkType": {
      "type": "String"
    },
    "vnet": {
      "type": "Object"
    },
    "ipRules": {
      "type": "Array"
    },
    "identity": {
      "type": "Object"
    },
    "privateEndpoints": {
      "type": "Array"
    },
    "privateDnsZone": {
      "type": "String"
    },
    "isCommitmentPlanForDisconnectedContainerEnabled": {
      "type": "Bool"
    },
    "commitmentPlanForDisconnectedContainer": {
      "type": "Object"
    }

  },
  "variables": {

    "defaultVNetName": "csCSDefaultVNet9901",
    "defaultSubnetName": "csCSDefaultSubnet9901",
    "defaultAddressPrefix": "13.41.6.0/26",
    "LocationName": "[replace(toLower(parameters('location')), ' ', '')]"

  }, // Content Safety stuff ...
  "resources": [
    {
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('LogAnalyticsName')]",
      "location": "[resourceGroup().location]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "properties": {
        "sku": {
          "name": "pergb2018"
        }
      }
    }, // Log Analytics
    {
      "name": "[parameters('ApplicationInsightName')]",
      "type": "microsoft.insights/components",
      "location": "[resourceGroup().location]",
      "apiVersion": "2020-02-02-preview",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsName'))]"
      ],
      "kind": "app",
      "properties": {
        "ApplicationId": "[parameters('ApplicationInsightName')]",
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('LogAnalyticsName'))]"
      }
    }, // Application Insight
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-08-01-preview",
      "name": "[parameters('VaultName')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "tags": {},
      "properties": {
        "enabledForDeployment": "true",
        "enabledForTemplateDeployment": "true",
        "enabledForDiskEncryption": "false",
        "enableRbacAuthorization": "true",
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "Standard",
          "family": "A"
        },
        "publicNetworkAccess": "Enabled",
        "enableSoftDelete": "false",
        "networkAcls": {
          "value": {
            "defaultAction": "allow",
            "bypass": "AzureServices",
            "ipRules": [],
            "virtualNetworkRules": []
          }
        }
      }
    }, // Key Vault
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2023-03-01",
      "name": "[parameters('AppConfigName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', parameters('ApplicationInsightName'))]"
      ],
      "sku": {
        "name": "standard"
      },
      "properties": {
        "softDeleteRetentionInDays": "1",
        "enablePurgeProtection": "false",
        "disableLocalAuth": "false",
        "telemetry": {
          "resourceId": "[resourceId('microsoft.insights/components', parameters('ApplicationInsightName'))]"
        }
      }
    }, // Application Configuration
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-11-01-preview",
      //semi hardcoded
      "name": "[format('{0}/{1}', parameters('VaultName'), 'ConnectionStringApplicationInsight')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('ApplicationInsightName'))]"
      ],
      "properties": {
        "value": "[reference(resourceId('Microsoft.Insights/components', parameters('ApplicationInsightName')), '2020-02-02').ConnectionString]"
      }
    }, // Application Configuration Connection String (Key Vault)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ConnectionStringBlob')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=core.windows.net')]",
        "attributes": {
          "enabled": true
        }
      }
    }, // Blob Storage Connection String (Key Vault)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ConnectionStringSB')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationrules', parameters('ServiceBusName'), 'RootManageSharedAccessKey'), '2023-01-01-preview').primaryConnectionString]",
        "attributes": {
          "enabled": true
        }
      }
    }, // Service Bus Connection String (Key Vault)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ConnectionStringContentSafety')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[parameters('ContentSafetyname')]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('ContentSafetyname')),'2024-06-01-preview').key1]",
        "attributes": {
          "enabled": true
        }
      }
    }, // Content Safety Connection String (Key Vault)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ConnectionStringCosmosDB')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('NoSQLname'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('AccountEndpoint=https://', parameters('NoSQLname'), '.documents.azure.com:443/;AccountKey=', listKeys(resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('NoSQLname')), '2024-12-01-preview').primaryMasterKey)]",
        "attributes": {
          "enabled": true
        }
      }
    }, // CosmosDB Connection String (Key Vault)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ConnectionStrings:CosmosDB')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ConnectionStringCosmosDB')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringCosmosDB'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // CosmosDB Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:CosmosDBdatabaseName')]",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('NoSQLname'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('NoSQLdatabaseName')]"
      }
    }, // CosmosDB Database Name (App Config)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ConnectionStringEventHub')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventHubName'), 'RootManageSharedAccessKey')]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventHubName'), 'RootManageSharedAccessKey'), '2024-05-01-preview').primaryConnectionString]",
        "attributes": {
          "enabled": true
        }
      }
    }, // Event Hub Connection String (Key Vault)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ConnectionStrings:EventHub')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ConnectionStringEventHub')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventHubName'), 'RootManageSharedAccessKey')]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringEventHub'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Event Hub Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:EventHubName')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventHubName'), 'RootManageSharedAccessKey')]"
      ],
      "properties": {
        "value": "[parameters('EventHubHubName')]"
      }
    }, // Event Hub Hub Name (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:EventHubConsumerName')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('EventHubName'), 'RootManageSharedAccessKey')]"
      ],
      "properties": {
        "value": "[parameters('EventHubConsumerGroupName')]"
      }
    }, // Event Hub Consumer Name (App Config)
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-04-01-preview",
      //semi hardcoded
      "name": "[concat(parameters('VaultName'), '/ContainerRegistry')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName')), '2022-02-01-preview').passwords[0].value]",
        "attributes": {
          "enabled": true
        }
      }
    }, // Container Registry Password (Key Vault)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'Password:ContainerRegistry')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ContainerRegistry')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ContainerRegistry'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Container Registry Password (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'Username:ContainerRegistry')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ContainerRegistry')]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName')), '2022-02-01-preview').username]"
      }
    }, // Container Registry Username (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ConnectionStrings:ContentSafety')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ConnectionStringContentSafety')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringContentSafety'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Content Safety Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:ServiceBusConnectionString')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ConnectionStringSB')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringSB'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Service Bus Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:ServiceBusQueue1Name')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('ServiceBusQueue1Name')]"
      }
    }, // Service Bus ServiceBusQueue1Name (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:ServiceBusQueue2Name')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('ServiceBusQueue2Name')]"
      }
    }, // Service Bus ServiceBusQueue2Name (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ConnectionStrings:ApplicationInsight')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets',  parameters('VaultName'), 'ConnectionStringApplicationInsight')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('ApplicationInsightName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringApplicationInsight'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Application Insight Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:BlobConnectionString')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringBlob')]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('ApplicationInsightName'))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[concat('{\"uri\": \"',reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('VaultName'), 'ConnectionStringBlob'), '2019-09-01').secretUriWithVersion, '\"}')]",
        "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
      }
    }, // Blob Storage Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:UnvalidatedBlob')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('storageBlobContainerName1')]"
      }
    }, // Blob Storage Container 1 - Unvalidated (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:ValidatedBlob')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('storageBlobContainerName2')]"
      }
    }, // Blob Storage Container 2 - Validated (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:SynchroBlob')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('storageBlobContainerName3')]"
      }
    }, // Blob Storage Container 3 - Synchro (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'Endpoints:AppConfiguration')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName')), '2023-03-01').endpoint]"
      }
    }, // App Configuration End Point (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'Endpoints:ContentSafety')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]",
        "[parameters('ContentSafetyname')]"
      ],
      "properties": {
        "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('ContentSafetyname')), '2024-06-01-preview').endpoint]"
      }
    }, // Content Safety Connection String (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'Endpoints:KeyVault')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('VaultName'))]"
      ],
      "properties": {
        "value": "[concat('https://', parameters('VaultName'), '.vault.azure.net/')]"
      }
    }, // Key Vault End Point (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:FontSize')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "20"
      }
    }, // Font Size (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:FontColor')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "red"
      }
    }, // Font Color (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:WelcomePhrase')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "Yo, welcome !!"
      }
    }, // Welcome Phrase (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'ApplicationConfiguration:Sentinel')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": 0
      }
    }, // Sentinel (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'DatabaseConfiguration')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "NoSQL"
      }
    }, // Database Type (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'AzureAd:Instance')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "https://login.microsoftonline.com/"
      }
    }, // Azure AD Instance (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'AzureAd:Domain')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('AzureAdDomainName')]"
      }
    }, // Azure AD Domain Name (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'AzureAd:TenantId')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[subscription().tenantId]"
      }
    }, // Azure AD Tenant ID (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'AzureAd:ClientId')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "[parameters('AzureAdClientId')]"
      }
    }, // Azure AD Client ID (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2024-05-01",
      // hardcoded
      "name": "[format('{0}/{1}', parameters('AppConfigName'), 'AzureAd:CallbackPath')]",
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName'))]"
      ],
      "properties": {
        "value": "/signin-oidc"
      }
    }, // Azure AD Signin (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-03-01-preview",
      "name": "[format('{0}/{1}', parameters('AppConfigName'), format('.appconfig.featureflag~2F{0}', 'FeatureA'))]",
      "properties": {
        "value": "[concat('{\"id\":\"FeatureA\",\"description\":\"\",\"enabled\":true,\"conditions\":{\"client_filters\":[]}}')]",
        "contentType": "application/vnd.microsoft.appconfig.ff+json;charset=utf-8"
      },
      "dependsOn": [ "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]" ]
    }, // Feature Flag A (App Config)
    {
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-03-01-preview",
      "name": "[format('{0}/{1}', parameters('AppConfigName'), format('.appconfig.featureflag~2F{0}', 'FeatureB'))]",
      "properties": {
        "value": "[concat('{\"id\":\"FeatureB\",\"description\":\"\",\"enabled\":false,\"conditions\":{\"client_filters\":[]}}')]",
        "contentType": "application/vnd.microsoft.appconfig.ff+json;charset=utf-8"
      },
      "dependsOn": [ "[resourceId('Microsoft.AppConfiguration/configurationStores', parameters('appConfigName'))]" ]
    }, // Feature Flag B (App Config)
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "tags": {},
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "minimumTlsVersion": "TLS1_2",
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "defaultToOAuthAuthentication": true,
        "accessTier": "Hot",
        "publicNetworkAccess": "Enabled",
        "allowCrossTenantReplication": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow",
          "ipRules": []
        },
        "dnsEndpointType": "Standard",
        "largeFileSharesState": "Enabled",
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            },
            "table": {
              "enabled": true
            },
            "queue": {
              "enabled": true
            }
          }
        }
      }
    }, // Blob Storage
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "cors": {
          "corsRules": []
        },
        "deleteRetentionPolicy": {
          "allowPermanentDelete": false,
          "enabled": false
        }
      }
    }, // Blob Service
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageBlobContainerName1'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "immutableStorageWithVersioning": {
          "enabled": false
        },
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Blob"
      }
    }, // Blob Storage Container 1
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageBlobContainerName2'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "immutableStorageWithVersioning": {
          "enabled": false
        },
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Blob"
      }
    }, // Blob Storage Container 2
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', parameters('storageBlobContainerName3'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "immutableStorageWithVersioning": {
          "enabled": false
        },
        "defaultEncryptionScope": "$account-encryption-key",
        "denyEncryptionScopeOverride": false,
        "publicAccess": "Blob"
      }
    }, // Blob Storage Container 3
    {
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2023-01-01-preview",
      "name": "[parameters('ServiceBusName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic",
        "tier": "Basic"
      },
      "properties": {
        "zoneRedundant": false,
        "minimumTlsVersion": "1.2",
        "disableLocalAuth": false,
        "publicNetworkAccess": "Enabled"
      }
    }, // Service Bus
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(parameters('ServiceBusName'), '/', parameters('ServiceBusQueue1Name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]"
      ],
      "properties": {
        "maxMessageSizeInKilobytes": 256,
        "lockDuration": "PT1M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": false,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": false,
        "enableExpress": false
      }
    }, // Service Bus Queue 1 - Image Resize
    {
      "type": "Microsoft.ServiceBus/namespaces/queues",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(parameters('ServiceBusName'),'/', parameters('ServiceBusQueue2Name'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]"
      ],
      "properties": {
        "maxMessageSizeInKilobytes": 256,
        "lockDuration": "PT1M",
        "maxSizeInMegabytes": 1024,
        "requiresDuplicateDetection": false,
        "requiresSession": false,
        "defaultMessageTimeToLive": "P14D",
        "deadLetteringOnMessageExpiration": false,
        "enableBatchedOperations": true,
        "duplicateDetectionHistoryTimeWindow": "PT10M",
        "maxDeliveryCount": 10,
        "status": "Active",
        "enablePartitioning": false,
        "enableExpress": false
      }
    }, // Service Bus Queue 2 - Content Safety
    {
      "type": "Microsoft.ServiceBus/namespaces/authorizationrules",
      "apiVersion": "2023-01-01-preview",
      "name": "[concat(parameters('ServiceBusName'), '/RootManageSharedAccessKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', parameters('ServiceBusName'))]"
      ],
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      }
    }, // Service Bus Authorization Rules

    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "name": "deployVnet",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "variables": {},
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-04-01",
              "name": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').name, variables('defaultVNetName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').addressPrefixes, json(concat('[{\"', variables('defaultAddressPrefix'),'\"}]')))]"
                },
                "subnets": [
                  {
                    "name": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').subnets.subnet.name, variables('defaultSubnetName'))]",
                    "properties": {
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.CognitiveServices",
                          "locations": [
                            "[parameters('location')]"
                          ]
                        }
                      ],
                      "addressPrefix": "[if(equals(parameters('virtualNetworkType'), 'External'), parameters('vnet').subnets.subnet.addressPrefix, variables('defaultAddressPrefix'))]"
                    }
                  }
                ]
              }
            }
          ]
        },
        "parameters": {}
      },
      "condition": "[and(and(not(empty(parameters('vnet'))), equals(parameters('vnet').newOrExisting, 'new')), equals(parameters('virtualNetworkType'), 'External'))]"
    }, // Content Safety
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2024-10-01",
      "name": "[parameters('ContentSafetyname')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Resources/deployments/', 'deployVnet')]"
      ],
      "sku": {
        "name": "F0"
      },
      "kind": "ContentSafety",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "customSubDomainName": "[toLower(parameters('ContentSafetyname'))]",
        "publicNetworkAccess": "[if(equals(parameters('virtualNetworkType'), 'Internal'), 'Disabled', 'Enabled')]",
        "networkAcls": {
          "defaultAction": "[if(equals(parameters('virtualNetworkType'), 'External'), 'Deny', 'Allow')]",
          "virtualNetworkRules": "[if(equals(parameters('virtualNetworkType'), 'External'), json(concat('[{\"id\": \"', concat(subscription().id, '/resourceGroups/', parameters('vnet').resourceGroup, '/providers/Microsoft.Network/virtualNetworks/', parameters('vnet').name, '/subnets/', parameters('vnet').subnets.subnet.name), '\"}]')), json('[]'))]",
          "ipRules": "[if(or(empty(parameters('ipRules')), empty(parameters('ipRules')[0].value)), json('[]'), parameters('ipRules'))]"
        }
      },
      "resources": [
        {
          "type": "commitmentPlans",
          "apiVersion": "2021-10-01",
          "name": "DisconnectedContainer-ContentSafety-1",
          "dependsOn": [
            "[parameters('ContentSafetyname')]"
          ],
          "properties": "[parameters('commitmentPlanForDisconnectedContainer')]",
          "condition": "[parameters('isCommitmentPlanForDisconnectedContainerEnabled')]"
        }
      ]
    }, // Content Safety
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "name": "[concat('deployPrivateEndpoint-', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name)]",
      "dependsOn": [
        "[concat('Microsoft.CognitiveServices/accounts/', parameters('ContentSafetyname'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "location": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.location]",
              "name": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2021-05-01",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.properties.subnet.id]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts/', parameters('ContentSafetyname'))]",
                      "groupIds": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.properties.privateLinkServiceConnections[0].properties.groupIds]"
                    }
                  }
                ],
                "customNetworkInterfaceName": "[concat(parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name, '-nic')]"
              },
              "tags": {}
            }
          ]
        }
      },
      "subscriptionId": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.subscription.subscriptionId]",
      "resourceGroup": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.resourceGroup.value.name]",
      "copy": {
        "name": "privateendpointscopy",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "condition": "[equals(parameters('virtualNetworkType'), 'Internal')]"
    }, // Content Safety
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2018-05-01",
      "name": "[concat('deployDnsZoneGroup-', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name)]",
      "dependsOn": [
        "[concat('deployPrivateEndpoint-', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name)]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2018-09-01",
              "name": "[parameters('privateDnsZone')]",
              "location": "global",
              "tags": {},
              "properties": {}
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2018-09-01",
              "name": "[concat(parameters('privateDnsZone'), '/', replace(uniqueString(parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.properties.subnet.id), '/subnets/default', ''))]",
              "location": "global",
              "dependsOn": [
                "[parameters('privateDnsZone')]"
              ],
              "properties": {
                "virtualNetwork": {
                  "id": "[split(parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.properties.subnet.id, '/subnets/')[0]]"
                },
                "registrationEnabled": false
              }
            },
            {
              "apiVersion": "2017-05-10",
              "name": "[concat('EndpointDnsRecords-', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name)]",
              "type": "Microsoft.Resources/deployments",
              "dependsOn": [
                "[parameters('privateDnsZone')]"
              ],
              "properties": {
                "mode": "Incremental",
                "templatelink": {
                  "uri": "https://go.microsoft.com/fwlink/?linkid=2264916"
                },
                "parameters": {
                  "privateDnsName": {
                    "value": "[parameters('privateDnsZone')]"
                  },
                  "privateEndpointNicResourceId": {
                    "value": "[concat('/subscriptions/', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.subscription.subscriptionId, '/resourceGroups/', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.resourceGroup.value.name, '/providers/Microsoft.Network/networkInterfaces/', parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name, '-nic')]"
                  },
                  "nicRecordsTemplateUri": {
                    "value": "https://go.microsoft.com/fwlink/?linkid=2264719"
                  },
                  "ipConfigRecordsTemplateUri": {
                    "value": "https://go.microsoft.com/fwlink/?linkid=2265018"
                  },
                  "uniqueId": {
                    "value": "[parameters('uniqueId')]"
                  },
                  "existingRecords": {
                    "value": {}
                  }
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2020-03-01",
              "name": "[concat(parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.privateEndpoint.name, '/', 'default')]",
              "location": "[parameters('location')]",
              "dependsOn": [
                "[parameters('privateDnsZone')]"
              ],
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-cognitiveservices",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZone'))]"
                    }
                  }
                ]
              }
            }
          ]
        }
      },
      "subscriptionId": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.subscription.subscriptionId]",
      "resourceGroup": "[parameters('privateEndpoints')[copyIndex()].privateEndpointConfiguration.resourceGroup.value.name]",
      "copy": {
        "name": "privateendpointdnscopy",
        "count": "[length(parameters('privateEndpoints'))]"
      },
      "condition": "[and(equals(parameters('virtualNetworkType'), 'Internal'), parameters('privateEndpoints')[copyIndex()].privateDnsZoneConfiguration.integrateWithPrivateDnsZone)]"
    }, // Content Safety

    {
      "apiVersion": "2024-12-01-preview",
      "kind": "GlobalDocumentDB",
      "type": "Microsoft.DocumentDb/databaseAccounts",
      "name": "[parameters('NoSQLname')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "id": "[concat(parameters('NoSQLname'), '-', parameters('location'))]",
            "failoverPriority": 0,
            "locationName": "[variables('locationName')]"
          }
        ],
        "backupPolicy": {
          "type": "Periodic",
          "periodicModeProperties": {
            "backupIntervalInMinutes": 1440,
            "backupRetentionIntervalInHours": 48,
            "backupStorageRedundancy": "Local"
          }
        },
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "ipRules": [],
        "dependsOn": [],
        "minimalTlsVersion": "Tls12",
        "capabilities": [],
        "capacityMode": "Serverless",
        "enableFreeTier": false,
        "capacity": {
          "totalThroughputLimit": 4000
        }
      },
      "tags": {
        "defaultExperience": "Core (SQL)",
        "hidden-cosmos-mmspecial": ""
      }
    }, // CosmosDB
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2024-05-01-preview",
      "name": "[parameters('EventHubName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": "1"
      },
      "properties": {
        "isAutoInflateEnabled": false,
        "maximumThroughputUnits": "0",
        "zoneRedundant": true,
        "minimumTlsVersion": "1.2",
        "disableLocalAuth": "false",
        "publicNetworkAccess": "Enabled"
      }
    }, // Event Hub Namespace
    {
      "type": "Microsoft.EventHub/namespaces/authorizationrules",
      "apiVersion": "2024-05-01-preview",
      "name": "[concat(parameters('EventHubName'), '/RootManageSharedAccessKey')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {
        "rights": [
          "Listen",
          "Manage",
          "Send"
        ]
      }
    }, // Event Hub Authorization Rules
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2024-05-01-preview",
      "name": "[concat(parameters('EventHubName'), '/' ,parameters('EventHubHubName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {
        "messageTimestampDescription": {
          "timestampType": "LogAppend"
        },
        "retentionDescription": {
          "cleanupPolicy": "Delete",
          "retentionTimeInHours": 1
        },
        "messageRetentionInDays": 1,
        "partitionCount": 1,
        "status": "Active"
      }
    }, // Event Hub Hub
    {
      "type": "Microsoft.EventHub/namespaces/networkrulesets",
      "apiVersion": "2024-05-01-preview",
      "name": "[concat(parameters('EventHubName'), '/default')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {
        "publicNetworkAccess": "Enabled",
        "defaultAction": "Allow",
        "virtualNetworkRules": [],
        "ipRules": [],
        "trustedServiceAccessEnabled": false
      }
    }, // Event Hub Ruleset
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2024-05-01-preview",
      "name": "[concat(parameters('EventHubName'), '/event/$Default')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('EventHubName'), parameters('EventHubHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {}
    }, // Event Hub Default Consumer Group
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2024-05-01-preview",
      "name": "[concat(parameters('EventHubName'), '/', parameters('EventHubHubName'), '/', parameters('EventHubConsumerGroupName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('EventHubName'), parameters('EventHubHubName'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('EventHubName'))]"
      ],
      "properties": {}
    }, // Event Hub Consumer Group
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-02-01-preview",
      "name": "[parameters('ContainerRegistryName')]",
      "location": "[parameters('location')]",
      "dependsOn": [],
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "adminUserEnabled": true,
        "publicNetworkAccess": "Enabled",
        "zoneRedundancy": "disabled"
      }
    } // Container Registry

  ],
  "outputs": {
    "dockerRegistryUrl": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName')), '2022-02-01-preview').loginServer]"
    },
    "dockerUsername": {
      "type": "string",
      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName')), '2022-02-01-preview').username]"
    },
    "dockerPassword": {
      "type": "string",
      "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('ContainerRegistryName')), '2022-02-01-preview').passwords[0].value]"
    },
    "AppConfigName": {
      "type": "String",
      "value": "[parameters('AppConfigName')]"
    },
    "AppConfigEndpoint": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores', parameters('AppConfigName')), '2023-03-01').endpoint]"
    }
  }
}
